<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring boot启动过程分析</title>
    <link href="/2024/deep-in-spring-boot-start-b6d8b6dc205b/"/>
    <url>/2024/deep-in-spring-boot-start-b6d8b6dc205b/</url>
    
    <content type="html"><![CDATA[<p>调用SpringbootApplication.run()之后到底发生了什么？<br>Spring是如何启动应用的？<br>拓展点有很多，我该选谁？<br>过程中有哪些设计可以借鉴？</p><h2 id="1-观察现象"><a href="#1-观察现象" class="headerlink" title="1. 观察现象"></a>1. 观察现象</h2><p>让我们看一段Spring Boot应用启动日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs log"><br>02:55:58.664 [main] INFO com.example.springdemo.initializer.MyInitializer -- Initializing MyInitializer<br>02:55:58.705 [restartedMain] INFO com.example.springdemo.initializer.MyInitializer -- Initializing MyInitializer<br><br>  .   ____          _            __ _ _<br> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \<br>( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \<br> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )<br>  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /<br> =========|_|==============|___/=/_/_/_/<br> :: Spring Boot ::                (v3.2.0)<br><br>2024-06-24T02:55:58.893+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.SpringDemoApplication     : Starting SpringDemoApplication using Java 21 with PID 1364008 (\spring-demo\target\classes started by adam in \spring-demo)<br>2024-06-24T02:55:58.894+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.SpringDemoApplication     : No active profile set, falling back to 1 default profile: &quot;default&quot;<br>2024-06-24T02:55:58.926+08:00  INFO 1364008 --- [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set &#x27;spring.devtools.add-properties&#x27; to &#x27;false&#x27; to disable<br>2024-06-24T02:55:58.926+08:00  INFO 1364008 --- [  restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the &#x27;logging.level.web&#x27; property to &#x27;DEBUG&#x27;<br>2024-06-24T02:55:59.500+08:00  INFO 1364008 --- [  restartedMain] c.e.s.a.MyAppAutoConfiguration           : MyAppAutoConfiguration built!<br>2024-06-24T02:55:59.526+08:00  INFO 1364008 --- [  restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729<br>2024-06-24T02:55:59.612+08:00  INFO 1364008 --- [  restartedMain] o.s.b.web.embedded.netty.NettyWebServer  : Netty started on port 8080<br>2024-06-24T02:55:59.613+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.GoodListener     : GoodListener event receive event: org.springframework.boot.web.reactive.context.ReactiveWebServerInitializedEvent[source=org.springframework.boot.web.embedded.netty.NettyWebServer@58fb4529]<br>2024-06-24T02:55:59.614+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.DemoListener     : Application event received: org.springframework.boot.web.reactive.context.ReactiveWebServerInitializedEvent<br>2024-06-24T02:55:59.614+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.EmoListener      : EmoListener event receive event: org.springframework.boot.web.reactive.context.ReactiveWebServerInitializedEvent[source=org.springframework.boot.web.embedded.netty.NettyWebServer@58fb4529]<br>2024-06-24T02:55:59.614+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.GoodListener     : GoodListener event receive event: org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@630d7a02, started on Mon Jun 24 02:55:58 CST 2024]<br>2024-06-24T02:55:59.617+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.DemoListener     : Application event received: org.springframework.context.event.ContextRefreshedEvent<br>2024-06-24T02:55:59.617+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.EmoListener      : EmoListener event receive event: org.springframework.context.event.ContextRefreshedEvent[source=org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@630d7a02, started on Mon Jun 24 02:55:58 CST 2024]<br>2024-06-24T02:55:59.617+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.SpringDemoApplication     : Started SpringDemoApplication in 0.913 seconds (process running for 1.276)<br>2024-06-24T02:55:59.618+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.GoodListener     : GoodListener event receive event: org.springframework.boot.context.event.ApplicationStartedEvent[source=org.springframework.boot.SpringApplication@4a35486f]<br>2024-06-24T02:55:59.618+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.DemoListener     : Application event received: org.springframework.boot.context.event.ApplicationStartedEvent<br>2024-06-24T02:55:59.618+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.EmoListener      : EmoListener event receive event: org.springframework.boot.context.event.ApplicationStartedEvent[source=org.springframework.boot.SpringApplication@4a35486f]<br>2024-06-24T02:55:59.618+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.GoodListener     : GoodListener event receive event: org.springframework.boot.availability.AvailabilityChangeEvent[source=org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@630d7a02, started on Mon Jun 24 02:55:58 CST 2024]<br>2024-06-24T02:55:59.618+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.DemoListener     : Application event received: org.springframework.boot.availability.AvailabilityChangeEvent<br>2024-06-24T02:55:59.618+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.EmoListener      : EmoListener event receive event: org.springframework.boot.availability.AvailabilityChangeEvent[source=org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@630d7a02, started on Mon Jun 24 02:55:58 CST 2024]<br>2024-06-24T02:55:59.619+08:00  INFO 1364008 --- [  restartedMain] c.example.springdemo.runner.GammaRunner  : GammaRunner with highest precedence invoked<br>2024-06-24T02:55:59.619+08:00  INFO 1364008 --- [  restartedMain] c.example.springdemo.runner.AlphaRunner  : AlphaRunner without order annotation invoked<br>2024-06-24T02:55:59.619+08:00  INFO 1364008 --- [  restartedMain] c.example.springdemo.runner.BetaRunner   : BetaRunner without order annotation invoked<br>2024-06-24T02:55:59.620+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.GoodListener     : GoodListener event receive event: org.springframework.boot.context.event.ApplicationReadyEvent[source=org.springframework.boot.SpringApplication@4a35486f]<br>2024-06-24T02:55:59.620+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.DemoListener     : Application event received: org.springframework.boot.context.event.ApplicationReadyEvent<br>2024-06-24T02:55:59.620+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.EmoListener      : EmoListener event receive event: org.springframework.boot.context.event.ApplicationReadyEvent[source=org.springframework.boot.SpringApplication@4a35486f]<br>2024-06-24T02:55:59.620+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.GoodListener     : GoodListener event receive event: org.springframework.boot.availability.AvailabilityChangeEvent[source=org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@630d7a02, started on Mon Jun 24 02:55:58 CST 2024]<br>2024-06-24T02:55:59.620+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.DemoListener     : Application event received: org.springframework.boot.availability.AvailabilityChangeEvent<br>2024-06-24T02:55:59.620+08:00  INFO 1364008 --- [  restartedMain] c.e.springdemo.listener.EmoListener      : EmoListener event receive event: org.springframework.boot.availability.AvailabilityChangeEvent[source=org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@630d7a02, started on Mon Jun 24 02:55:58 CST 2024]<br><br></code></pre></td></tr></table></figure><p>Spring的启动日志中，总共出现了：</p><ul><li>MyInitializer</li><li>MyAppAutoConfiguration</li><li>DemoListener</li><li>EmoListener</li><li>GoodListener</li><li>AlphaRunner</li><li>BetaRunner</li><li>GammaRunner</li></ul><p>共计8个自定义类，分属四种拓展形式。我们可以看到，它们的输出有特定顺序，并且可以人为调整。接下来，让我们阅读SPringbootApplication.run()方法的源码，了解Springboot是如何启动应用的。</p><h2 id="2-第一步-SpringbootApplication-run"><a href="#2-第一步-SpringbootApplication-run" class="headerlink" title="2. 第一步 SpringbootApplication.run()"></a>2. 第一步 SpringbootApplication.run()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringDemoApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringDemoApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>当我们执行上面这样的代码时，spring完成了两件工作：</p><ol><li>创建<code>SpringApplication</code>实例</li><li>执行<code>SpringApplication</code>的run方法</li></ol><h3 id="2-1-创建SpringBootApplication实例"><a href="#2-1-创建SpringBootApplication实例" class="headerlink" title="2.1. 创建SpringBootApplication实例"></a>2.1. 创建<code>SpringBootApplication</code>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// org.springframework.boot.SpringApplication</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Create a new &#123;<span class="hljs-doctag">@link</span> SpringApplication&#125; instance. The application context will load</span><br><span class="hljs-comment"> * beans from the specified primary sources (see &#123;<span class="hljs-doctag">@link</span> SpringApplication class-level&#125;</span><br><span class="hljs-comment"> * documentation for details). The instance can be customized before calling</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> #run(String...)&#125;.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> resourceLoader the resource loader to use</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> primarySources the primary bean sources</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> #run(Class, String[])</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> #setSources(Set)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">SpringApplication</span><span class="hljs-params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;<br>    <span class="hljs-built_in">this</span>.resourceLoader = resourceLoader;<br>    Assert.notNull(primarySources, <span class="hljs-string">&quot;PrimarySources must not be null&quot;</span>);<br>    <span class="hljs-built_in">this</span>.primarySources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));<br>    <span class="hljs-built_in">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();<br>    <span class="hljs-built_in">this</span>.bootstrapRegistryInitializers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<br>            getSpringFactoriesInstances(BootstrapRegistryInitializer.class));<br>    setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));<br>    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));<br>    <span class="hljs-built_in">this</span>.mainApplicationClass = deduceMainApplicationClass();<br>&#125;<br></code></pre></td></tr></table></figure><p>这里创建了一个SpringApplication实例，<code>resourceLoader</code>为null，<code>primarySources</code>是我们的启动类<code>SpringDemoApplication.class</code>。先通过<code>WebApplicationType.deduceFromClasspath()</code>判断应用类型；然后通过<code>getSpringFactoriesInstances()</code>访问*.factories文件，以类似SPI加载的方式获取服务配置；最终完成SpringApplication实例的初始化工作。</p><h3 id="2-2-执行SpringApplication的run方法"><a href="#2-2-执行SpringApplication的run方法" class="headerlink" title="2.2. 执行SpringApplication的run方法"></a>2.2. 执行SpringApplication的run方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Run the Spring application, creating and refreshing a new</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> ApplicationContext&#125;.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args the application arguments (usually passed from a Java main method)</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> a running &#123;<span class="hljs-doctag">@link</span> ApplicationContext&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(String... args)</span> &#123;<br>  <span class="hljs-type">Startup</span> <span class="hljs-variable">startup</span> <span class="hljs-operator">=</span> Startup.create();<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.registerShutdownHook) &#123;<br>    SpringApplication.shutdownHook.enableShutdownHookAddition();<br>  &#125;<br>  <span class="hljs-type">DefaultBootstrapContext</span> <span class="hljs-variable">bootstrapContext</span> <span class="hljs-operator">=</span> createBootstrapContext();<br>  <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>  configureHeadlessProperty();<br>  <span class="hljs-type">SpringApplicationRunListeners</span> <span class="hljs-variable">listeners</span> <span class="hljs-operator">=</span> getRunListeners(args);<br>  listeners.starting(bootstrapContext, <span class="hljs-built_in">this</span>.mainApplicationClass);<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultApplicationArguments</span>(args);<br>    <span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> prepareEnvironment(listeners, bootstrapContext, applicationArguments);<br>    <span class="hljs-type">Banner</span> <span class="hljs-variable">printedBanner</span> <span class="hljs-operator">=</span> printBanner(environment);<br>    context = createApplicationContext();<br>    context.setApplicationStartup(<span class="hljs-built_in">this</span>.applicationStartup);<br>    prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);<br>    refreshContext(context);<br>    afterRefresh(context, applicationArguments);<br>    startup.started();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">StartupInfoLogger</span>(<span class="hljs-built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), startup);<br>    &#125;<br>    listeners.started(context, startup.timeTakenToStarted());<br>    callRunners(context, applicationArguments);<br>  &#125;<br>  <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>    <span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> AbandonedRunException) &#123;<br>      <span class="hljs-keyword">throw</span> ex;<br>    &#125;<br>    handleRunFailure(context, ex, listeners);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(ex);<br>  &#125;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">if</span> (context.isRunning()) &#123;<br>      listeners.ready(context, startup.ready());<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>    <span class="hljs-keyword">if</span> (ex <span class="hljs-keyword">instanceof</span> AbandonedRunException) &#123;<br>      <span class="hljs-keyword">throw</span> ex;<br>    &#125;<br>    handleRunFailure(context, ex, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(ex);<br>  &#125;<br>  <span class="hljs-keyword">return</span> context;<br>&#125;<br></code></pre></td></tr></table></figure><p>run方法的流程可以拆分为以下三个主要阶段：</p><ol><li>准备阶段</li><li>启动阶段</li><li>善后阶段</li></ol><h4 id="2-2-1-准备阶段"><a href="#2-2-1-准备阶段" class="headerlink" title="2.2.1. 准备阶段"></a>2.2.1. 准备阶段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Startup</span> <span class="hljs-variable">startup</span> <span class="hljs-operator">=</span> Startup.create();<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.registerShutdownHook) &#123;<br>  SpringApplication.shutdownHook.enableShutdownHookAddition();<br>&#125;<br><span class="hljs-type">DefaultBootstrapContext</span> <span class="hljs-variable">bootstrapContext</span> <span class="hljs-operator">=</span> createBootstrapContext();<br><span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>configureHeadlessProperty();<br><span class="hljs-type">SpringApplicationRunListeners</span> <span class="hljs-variable">listeners</span> <span class="hljs-operator">=</span> getRunListeners(args);<br>listeners.starting(bootstrapContext, <span class="hljs-built_in">this</span>.mainApplicationClass);<br></code></pre></td></tr></table></figure><p>准备阶段按顺序完成以下工作：</p><ol><li>调用Startup.create()创建启动标志</li><li>如果有注册关闭事件的生命周期钩子，开启对应的生命周期钩子</li><li>创建启动上下文</li><li>配置无头模式</li><li>获取监听器</li><li>发布启动事件</li></ol><p>其中，下面的日志发生在第三步，创建启动上下文时。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs log">02:55:58.664 [main] INFO com.example.springdemo.initializer.MyInitializer -- Initializing MyInitializer<br>02:55:58.705 [restartedMain] INFO com.example.springdemo.initializer.MyInitializer -- Initializing MyInitializer<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> DefaultBootstrapContext <span class="hljs-title function_">createBootstrapContext</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">DefaultBootstrapContext</span> <span class="hljs-variable">bootstrapContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultBootstrapContext</span>();<br>  <span class="hljs-built_in">this</span>.bootstrapRegistryInitializers.forEach((initializer) -&gt; initializer.initialize(bootstrapContext));<br>  <span class="hljs-keyword">return</span> bootstrapContext;<br>&#125;<br><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInitializer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BootstrapRegistryInitializer</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(BootstrapRegistry registry)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;Initializing MyInitializer&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当调用forEach方法挨个执行从spring.factories中读取的<code>BootstrapRegistryInitializer</code>接口的实现类时，便会调用initialize接口，本例中仅输出一条日志。</p><p>第5步获取监听器配置是一个重要的拓展模式。请注意<code>SpringApplicationRunListener</code>的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Listener for the &#123;<span class="hljs-doctag">@link</span> SpringApplication&#125; &#123;<span class="hljs-doctag">@code</span> run&#125; method.</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> SpringApplicationRunListener&#125;s are loaded through the</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> SpringFactoriesLoader&#125; and should declare a public constructor that accepts a</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> SpringApplication&#125; instance and a &#123;<span class="hljs-doctag">@code</span> String[]&#125; of arguments. A new</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> SpringApplicationRunListener&#125; instance will be created for each run.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Phillip Webb</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Dave Syer</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Andy Wilkinson</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Chris Bono</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SpringApplicationRunListener</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Called immediately when the run method has first started. Can be used for very</span><br><span class="hljs-comment"> * early initialization.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> bootstrapContext the bootstrap context</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">starting</span><span class="hljs-params">(ConfigurableBootstrapContext bootstrapContext)</span> &#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Called once the environment has been prepared, but before the</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> ApplicationContext&#125; has been created.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> bootstrapContext the bootstrap context</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> environment the environment</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">environmentPrepared</span><span class="hljs-params">(ConfigurableBootstrapContext bootstrapContext,</span><br><span class="hljs-params">ConfigurableEnvironment environment)</span> &#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Called once the &#123;<span class="hljs-doctag">@link</span> ApplicationContext&#125; has been created and prepared, but</span><br><span class="hljs-comment"> * before sources have been loaded.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> context the application context</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextPrepared</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Called once the application context has been loaded but before it has been</span><br><span class="hljs-comment"> * refreshed.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> context the application context</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoaded</span><span class="hljs-params">(ConfigurableApplicationContext context)</span> &#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * The context has been refreshed and the application has started but</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> CommandLineRunner CommandLineRunners&#125; and &#123;<span class="hljs-doctag">@link</span> ApplicationRunner</span><br><span class="hljs-comment"> * ApplicationRunners&#125; have not been called.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> context the application context.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> timeTaken the time taken to start the application or &#123;<span class="hljs-doctag">@code</span> null&#125; if unknown</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2.6.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">started</span><span class="hljs-params">(ConfigurableApplicationContext context, Duration timeTaken)</span> &#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Called immediately before the run method finishes, when the application context has</span><br><span class="hljs-comment"> * been refreshed and all &#123;<span class="hljs-doctag">@link</span> CommandLineRunner CommandLineRunners&#125; and</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> ApplicationRunner ApplicationRunners&#125; have been called.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> context the application context.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> timeTaken the time taken for the application to be ready or &#123;<span class="hljs-doctag">@code</span> null&#125; if</span><br><span class="hljs-comment"> * unknown</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2.6.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ready</span><span class="hljs-params">(ConfigurableApplicationContext context, Duration timeTaken)</span> &#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Called when a failure occurs when running the application.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> context the application context or &#123;<span class="hljs-doctag">@code</span> null&#125; if a failure occurred before</span><br><span class="hljs-comment"> * the context was created</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> exception the failure</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">failed</span><span class="hljs-params">(ConfigurableApplicationContext context, Throwable exception)</span> &#123;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，Springboot为上下文设置了七个生命周期状态，即七个拓展点。分别是：</p><ul><li>starting——在run方法启动时触发，可以用于执行非常早期的初始化动作。通过run方法的源码可以知道，该钩子在创建好启动上下文（<code>DefaultBootstrapContext</code>）即被调用</li><li>environmentPrepared</li><li>contextPrepared</li><li>contextLoaded</li><li>started</li><li>ready</li><li>failed</li></ul><p>我们可以通过实现SpringApplicationRunListener接口并利用spring.factories将实现类植入spring中，用于在正确的生命周期钩子处完成目标工作。作为举例我们可以观察其中一个实现类<code>org.springframework.boot.context.event.EventPublishingRunListener</code>，正是这个类实现了将上下文钩子事件广播出去的需求。</p><h4 id="2-2-2-启动阶段"><a href="#2-2-2-启动阶段" class="headerlink" title="2.2.2. 启动阶段"></a>2.2.2. 启动阶段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. 准备环境参数</span><br><span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultApplicationArguments</span>(args);<br><span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> prepareEnvironment(listeners, bootstrapContext, applicationArguments);<br><span class="hljs-type">Banner</span> <span class="hljs-variable">printedBanner</span> <span class="hljs-operator">=</span> printBanner(environment);<br><span class="hljs-comment">//2. 创建应用上下文</span><br>context = createApplicationContext();<br>context.setApplicationStartup(<span class="hljs-built_in">this</span>.applicationStartup);<br><span class="hljs-comment">//3. 准备应用上下文</span><br>prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);<br><span class="hljs-comment">//4. 刷新应用上下文</span><br>refreshContext(context);<br>afterRefresh(context, applicationArguments);<br>startup.started();<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">StartupInfoLogger</span>(<span class="hljs-built_in">this</span>.mainApplicationClass).logStarted(getApplicationLog(), startup);<br>&#125;<br><span class="hljs-comment">//5. 调用生命周期函数</span><br>listeners.started(context, startup.timeTakenToStarted());<br><span class="hljs-comment">//6. 调用Runner</span><br>callRunners(context, applicationArguments);<br></code></pre></td></tr></table></figure><p>正式的应用上下文（区别于启动上下文）是在上述代码中创建并且配置的。大致步骤如下:</p><ol><li>准备环境参数</li><li>创建应用上下文</li><li>准备应用上下文</li><li>刷新应用上下文</li><li>调用生命周期函数</li><li>调用Runner</li></ol><h5 id="2-2-2-1-准备环境参数"><a href="#2-2-2-1-准备环境参数" class="headerlink" title="2.2.2.1. 准备环境参数"></a>2.2.2.1. 准备环境参数</h5><p>这一步以打印标题为结束标志，即我们常说的Banner。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs log">  .   ____          _            __ _ _<br> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \<br>( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \<br> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )<br>  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /<br> =========|_|==============|___/=/_/_/_/<br> :: Spring Boot ::                (v3.2.0)<br></code></pre></td></tr></table></figure><p><code>ApplicationArguments</code>对象代表了命令行启动时输入的参数</p><p><code>ConfigurableEnvironment</code>对象则表示读取到的环境变量</p><h5 id="2-2-2-2-创建应用上下文"><a href="#2-2-2-2-创建应用上下文" class="headerlink" title="2.2.2.2. 创建应用上下文"></a>2.2.2.2. 创建应用上下文</h5><p>通过调用<code>ApplicationContextFactory</code>的抽象工厂方法，实际通过spring.factories委派至对应的工厂实现创建应用上下文。<strong>一般我们在需要创建定制上下文时可以在此处利用spring.factories机制拓展。</strong></p><blockquote><p>本例中，系统委派至<code>ReactiveWebServerApplicationContextFactory</code>实现类。注意，spring的两个web实现，<code>ServletWebServerApplicationContextFactory</code>和<code>ReactiveWebServerApplicationContextFactory</code>都在工厂内实现了aot上下文和非aot上下文的创建。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> ConfigurableApplicationContext <span class="hljs-title function_">create</span><span class="hljs-params">(WebApplicationType webApplicationType)</span> &#123;<br><span class="hljs-keyword">return</span> (webApplicationType != WebApplicationType.REACTIVE) ? <span class="hljs-literal">null</span> : createContext();<br>&#125;<br><br><span class="hljs-keyword">private</span> ConfigurableApplicationContext <span class="hljs-title function_">createContext</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (!AotDetector.useGeneratedArtifacts()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigReactiveWebServerApplicationContext</span>();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReactiveWebServerApplicationContext</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-2-3-准备应用上下文"><a href="#2-2-2-3-准备应用上下文" class="headerlink" title="2.2.2.3. 准备应用上下文"></a>2.2.2.3. 准备应用上下文</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">prepareContext</span><span class="hljs-params">(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context,</span><br><span class="hljs-params">ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span><br><span class="hljs-params">ApplicationArguments applicationArguments, Banner printedBanner)</span> &#123;<br>context.setEnvironment(environment);<br>postProcessApplicationContext(context);<br>addAotGeneratedInitializerIfNecessary(<span class="hljs-built_in">this</span>.initializers);<br>applyInitializers(context);<br>listeners.contextPrepared(context);<br>bootstrapContext.close(context);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<br>logStartupInfo(context.getParent() == <span class="hljs-literal">null</span>);<br>logStartupProfileInfo(context);<br>&#125;<br><span class="hljs-comment">// Add boot specific singleton beans</span><br><span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> context.getBeanFactory();<br>beanFactory.registerSingleton(<span class="hljs-string">&quot;springApplicationArguments&quot;</span>, applicationArguments);<br><span class="hljs-keyword">if</span> (printedBanner != <span class="hljs-literal">null</span>) &#123;<br>beanFactory.registerSingleton(<span class="hljs-string">&quot;springBootBanner&quot;</span>, printedBanner);<br>&#125;<br><span class="hljs-keyword">if</span> (beanFactory <span class="hljs-keyword">instanceof</span> AbstractAutowireCapableBeanFactory autowireCapableBeanFactory) &#123;<br>autowireCapableBeanFactory.setAllowCircularReferences(<span class="hljs-built_in">this</span>.allowCircularReferences);<br><span class="hljs-keyword">if</span> (beanFactory <span class="hljs-keyword">instanceof</span> DefaultListableBeanFactory listableBeanFactory) &#123;<br>listableBeanFactory.setAllowBeanDefinitionOverriding(<span class="hljs-built_in">this</span>.allowBeanDefinitionOverriding);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.lazyInitialization) &#123;<br>context.addBeanFactoryPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyInitializationBeanFactoryPostProcessor</span>());<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.keepAlive) &#123;<br><span class="hljs-type">KeepAlive</span> <span class="hljs-variable">keepAlive</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeepAlive</span>();<br>keepAlive.start();<br>context.addApplicationListener(keepAlive);<br>&#125;<br>context.addBeanFactoryPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertySourceOrderingBeanFactoryPostProcessor</span>(context));<br><span class="hljs-keyword">if</span> (!AotDetector.useGeneratedArtifacts()) &#123;<br><span class="hljs-comment">// Load the sources</span><br>Set&lt;Object&gt; sources = getAllSources();<br>Assert.notEmpty(sources, <span class="hljs-string">&quot;Sources must not be empty&quot;</span>);<br>load(context, sources.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>]));<br>&#125;<br>listeners.contextLoaded(context);<br>&#125;<br></code></pre></td></tr></table></figure><p>spring在此处完成上下文的初始化工作，诸如：为上下文设置环境变量，初始化Bean工厂的设定，执行<code>ApplicationContextInitializer</code>对上下文进行自定义初始化，注册启动参数以及Banner的单例，配置循环引用开关，注册懒加载处理器等等</p><p>其中，有如下拓展点可用于定制:</p><ol><li>通过继承SpringApplication类，重写postProcessApplicationContext方法实现上下文的调整。如默认的SpringApplication类在该方法中完成对beanNameGenerator、resourceLoader、conversionService的初始化设定</li><li>实现<code>ApplicationContextInitializer</code>，自定义上下文的初始化。ApplicationContextInitializer的实现类需要写在spring.factories中，以便于Spring在启动时可以将其载入SpringApplication类的initializers属性中。当执行至<code>applyInitializers</code>方法时，便会遍历<code>getInitializers</code>方法返回的列表，逐个调用加载的<code>ApplicationContextInitializer</code>实现类完成自定义初始化。需要注意，<code>getInitializers</code>方法会根据实现类上的Order注解进行排序。</li></ol><h5 id="2-2-2-4-刷新应用上下文"><a href="#2-2-2-4-刷新应用上下文" class="headerlink" title="2.2.2.4. 刷新应用上下文"></a>2.2.2.4. 刷新应用上下文</h5><p>这一步非常重要，前面的步骤中我们仅完成了上下文的创建，基础参数设置和部分初始化工作，我们书写的bean并没有被注册到上下文中。Spring正是通过refresh操作完成所有自定义bean的注册和启动工作。以webflux的启动为例，这里的调用链有些复杂，请看下图说明：</p><h4 id="2-2-3-善后阶段"><a href="#2-2-3-善后阶段" class="headerlink" title="2.2.3. 善后阶段"></a>2.2.3. 善后阶段</h4><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p><img src="/img/spring-boot-start.jpg" alt="启动流程图"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>源码分析</tag>
      
      <tag>每周一篇</tag>
      
      <tag>spring boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式——策略模式</title>
    <link href="/2024/desgin-patterns-2-0ef8b8c69eeb/"/>
    <url>/2024/desgin-patterns-2-0ef8b8c69eeb/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式——写在最前面</title>
    <link href="/2024/desgin-patterns-1-3f3098a5c100/"/>
    <url>/2024/desgin-patterns-1-3f3098a5c100/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h2><p>wiki中介绍，模式是存在于人们感知到的世界、人造设计或抽象思想中的规律。而设计模式（design pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。这个术语是由埃里希·伽玛（Erich Gamma）等人在1990年代从建筑设计领域引入到计算机科学的。</p><h2 id="为什么需要设计模式"><a href="#为什么需要设计模式" class="headerlink" title="为什么需要设计模式"></a>为什么需要设计模式</h2><ol><li>设计模式是针对软件设计中常见问题的工具箱， 其中的工具就是各种经过实践验证的解决方案。</li><li>设计模式定义了一种让你和团队成员能够更高效沟通的通用语言。</li></ol><h2 id="有多少种设计模式，如何对他们进行分类"><a href="#有多少种设计模式，如何对他们进行分类" class="headerlink" title="有多少种设计模式，如何对他们进行分类"></a>有多少种设计模式，如何对他们进行分类</h2><p>最基础的、 底层的模式通常被称为惯用技巧。 这类模式一般只能在一种编程语言中使用。</p><p>最通用的、 高层的模式是构架模式。 开发者可以在任何编程语言中使用这类模式。 与其他模式不同， 它们可用于整个应用程序的架构设计。</p><p>《GoF》中提出了23种设计模式，并将其归类为创建型模式，结构型模式，行为模式三类。但人们在后续的工作和学习中又总结并丰富了更多的模式，如《反应式设计模式》一书中又新增6类，27种架构模式。他们的关系图如下：</p><p><img src="/img/design-patterns/gof.svg" alt="GoF23"><br><img src="/img/design-patterns/reactor.svg" alt="反应式设计模式"></p>]]></content>
    
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java.util中的容器——List篇</title>
    <link href="/2024/java-list-keypoints-9f3421da9ebf/"/>
    <url>/2024/java-list-keypoints-9f3421da9ebf/</url>
    
    <content type="html"><![CDATA[<h2 id="1-继承结构"><a href="#1-继承结构" class="headerlink" title="1. 继承结构"></a>1. 继承结构</h2><p>可以看到</p><p><img src="/img/java-keypoints/List.svg" alt="类图"></p><blockquote><p>为什么ArrayList、Vector、LinkedList在继承了AbstractList之后还要再次申明实现了List接口呢？这是不是一种多余的行为？<br>就目前的结果而言确实多余，但是在util里所有的容器中，他们都采用了类似的写法。而且就我所知Josh Bloch没有解释为什么，所以这个问题可能没有官方解释。<br>我的理解是：在类定义中再次实现接口而不是通过继承抽象类获得接口的继承关系，意味着子类和接口有着明确的关系，不因父类的变化而变化。这在业务代码中是没哟意义的，但是作为标准库使用时就变得非常有必要，这样做可以避免修改的扩散。</p></blockquote><h2 id="2-ArrayList"><a href="#2-ArrayList" class="headerlink" title="2. ArrayList"></a>2. ArrayList</h2><h3 id="2-1-EMPTY-ELEMENTDATA和DEFAULTCAPACITY-EMPTY-ELEMENTDATA的关系"><a href="#2-1-EMPTY-ELEMENTDATA和DEFAULTCAPACITY-EMPTY-ELEMENTDATA的关系" class="headerlink" title="2.1. EMPTY_ELEMENTDATA和DEFAULTCAPACITY_EMPTY_ELEMENTDATA的关系"></a>2.1. EMPTY_ELEMENTDATA和DEFAULTCAPACITY_EMPTY_ELEMENTDATA的关系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Shared empty array instance used for empty instances.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Shared empty array instance used for default sized empty instances. We</span><br><span class="hljs-comment"> * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span><br><span class="hljs-comment"> * first element is added.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<br></code></pre></td></tr></table></figure><p>ArrayList定义了两个全局唯一的空对象数组用于表示空列表。其中<code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>仅用于使用无参构造器创建的空列表对象。其他场景下，都使用<code>EMPTY_ELEMENTDATA</code>来表示空列表。为什么要分别使用两个空数组，为何不更极致一些只用一个空数组呢？</p><p>答：为了精细化控制数组扩容长度。两者的分歧点在于<code>grow(int)</code>方法，使用无参构造器创建的列表在首次扩容时至少会被赋予10的长度。而通过反序列化、有参构造器创建出来的空数组，只会使用<code>EMPTY_ELEMENTDATA</code>，此时grow不受10的制约，会按照</p><h3 id="2-2-方法内联优化"><a href="#2-2-方法内联优化" class="headerlink" title="2.2. 方法内联优化"></a>2.2. 方法内联优化</h3><p>在阅读源码时可以看到如下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>    modCount++;<br>    add(e, elementData, size);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This helper method split out from add(E) to keep method</span><br><span class="hljs-comment"> * bytecode size under 35 (the -XX:MaxInlineSize default value),</span><br><span class="hljs-comment"> * which helps when add(E) is called in a C1-compiled loop.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e, Object[] elementData, <span class="hljs-type">int</span> s)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s == elementData.length)<br>        elementData = grow();<br>    elementData[s] = e;<br>    size = s + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个私有的add方法仅在add(E)中出现，注释中说明这么做的目的是为了让方法体的字节码小于35从而保证激活内联优化。那么，内联优化的原理是什么？</p><h3 id="并发修改的判断"><a href="#并发修改的判断" class="headerlink" title="并发修改的判断"></a>并发修改的判断</h3><p>通过方法内final标记，以及独立的modcount计数器，数组长度来判断</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>源码分析</tag>
      
      <tag>每周一篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>垃圾回收的算法与实现学习笔记——基本概念</title>
    <link href="/gc-review-1-93f9ea0bb0ff/"/>
    <url>/gc-review-1-93f9ea0bb0ff/</url>
    
    <content type="html"><![CDATA[<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul><li>不同于OOP，这里的对象指的是应用程序使用的数据的集合。</li><li>对象配置在内存空间里。</li><li>对象时GC的基本运作单位</li></ul><p>一般说来，对象由头（<code>Header</code>）和域（<code>Field</code>）构成</p><h3 id="头"><a href="#头" class="headerlink" title="头"></a>头</h3><p>对象中保存对象本身信息的部分称为头，主要包含：</p><ul><li>对象的大小</li><li>对象的种类</li></ul><h3 id="域"><a href="#域" class="headerlink" title="域"></a>域</h3><p>对象使用者在对象中可访问的部分称为域。</p><blockquote><p>可以将域理解为java中class的成员变量，如<br>class A {<br>  int val;<br>}<br>若有A的实例a，则a.val就是对象a的域</p></blockquote><p>域的值有两种：</p><ul><li>指针</li><li>非指针</li></ul><p>指针就是执行啊内存空间中某块区域的值，C语言中有明确的指针类型，java则没有。对于没有暴露指针的语言，可以将其理解为引用</p><p>非指针值得是在编程过程中直接使用值本身，比如java中的int、bool等都是非指针。</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>GC程序通过指针找到需要销毁或者保留对象，另一方面GC程序不处理非指针。</p><p>有两点需要注意：</p><ul><li>程序是否能判别指针和非指针</li><li>指针会指向对象的哪个部分</li></ul><h2 id="Mutator"><a href="#Mutator" class="headerlink" title="Mutator"></a>Mutator</h2><p>如果说GC程序负责回收垃圾，那么mutator就是负责创建对象的程序</p><p>mutator实际进行的操作有以下两种：</p><ul><li>生成对象</li><li>更新指针</li></ul><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆是用于动态存放对象的内存空间。当mutator申请存放对象时，所需内存空间会从这个堆中被分配给mutator。</p><h2 id="活动对象-x2F-非活动对象"><a href="#活动对象-x2F-非活动对象" class="headerlink" title="活动对象&#x2F;非活动对象"></a>活动对象&#x2F;非活动对象</h2><p>堆中能被mutator引用的对象称为“活动对象”；堆中不能通过遍历引用访问到的对象称为“非活动对象”。换言之，这些“非活动对象”就是“垃圾”。</p><blockquote><p>需要注意，成为垃圾的对象不能活过来，因为mutator再也找不到它。</p></blockquote><h2 id="分配"><a href="#分配" class="headerlink" title="分配"></a>分配</h2><p>当mutator需要创建新对象时，就会向allocator申请一个大小合适的空间。而allocator在堆的可用空间中寻找满足要求的连续空间，并返回给mutator。</p><h2 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h2><p>分块（chunk）在这里指的是为利用对象而事分配好的单元。</p><p>初始状态下，堆被一个大的分块所占据</p><p>程序会根据mutator的要求把这个分块分割成合适的大小，作为（活动）对象使用。</p><p>内存里的各个区块都重复着分块-〉活动对象-〉垃圾（非活动对象）-〉分块-〉……这样的过程</p><h2 id="根"><a href="#根" class="headerlink" title="根"></a>根</h2><p>根是指向对象的指针的“起点”部分。</p><h2 id="评价标准"><a href="#评价标准" class="headerlink" title="评价标准"></a>评价标准</h2><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><p>一般意义上，吞吐量指的是“在单位时间内的处理能力”。</p><p>即便是同一GC算法，其吞吐量也是受mutator的动作左右的。评价GC算法的吞吐量，有必要吧mutator的动作考虑在内。</p><h3 id="最大暂停时间"><a href="#最大暂停时间" class="headerlink" title="最大暂停时间"></a>最大暂停时间</h3><p>最大暂停时间指的是“因执行GC而暂停执行mutator的最长时间”</p><blockquote><p>不管尝试哪种GC算法，大吞吐量和低延迟不可兼得</p></blockquote><h3 id="堆使用率"><a href="#堆使用率" class="headerlink" title="堆使用率"></a>堆使用率</h3><p>左右堆使用效率的因素有二，对象头的大小和调度堆空间的算法。</p><blockquote><p>不可能三角：堆使用效率，吞吐量和最大延迟不能兼顾</p></blockquote><h3 id="访问的局部性"><a href="#访问的局部性" class="headerlink" title="访问的局部性"></a>访问的局部性</h3><p>根据局部性原理，把有引用关系的对象安排在堆中较近的位置可以提高读取效率，提高mutator的运行速度。</p>]]></content>
    
    
    
    <tags>
      
      <tag>GC</tag>
      
      <tag>学习笔记</tag>
      
      <tag>垃圾回收的算法与实现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈使用hook实现React中的应用状态管理</title>
    <link href="/state-management-in-react-dca2d154d95d/"/>
    <url>/state-management-in-react-dca2d154d95d/</url>
    
    <content type="html"><![CDATA[<p>状态管理可以说是所有应用中最难处理的一部分。这也是为什么当下存在这么多的状态管理工具，并且仍然层出不穷（有一些工具甚至建立在另一些之上，npm 中有大量 “简单版的 redux“）。然而，我认为正是由于我们经常过度设计，才导致这个问题这么难处理。</p><p>我们通常把 React 组件看做乐高积木，用它们来搭建应用。我觉着听到这个说法的人，通常会隐隐地觉得这个说法遗漏了和状态相关的那一部分。我自己使用的方法的“秘密”就是：对待状态管理问题时，想想怎么把应用的状态映射到应用的树状结构上面去。</p><p>redux 大获成功的原因之一就是它解决了Prop Drilling问题。通过把组件传给一些神奇的 connect 函数就可以让数据共享到应用树的任意地方的做法确实很棒。对 reducers&#x2F;action creator 的使用也不错，但我仍然坚信 redux 的被普遍使用的原因是它为开发者解决了 prop drilling 所带来的痛苦。</p><p>我经常看到开发者把他们所有的状态（state）都放到 redux 中。包括全局状态和本地状态。这会导致非常多的问题，其中最重要的一个是，当你在维护任何状态交互时，都将会涉及到 reducer 、action creator &#x2F; types 和 dispatch 调用的交互，这最终导致我们必须打开一大堆文件，并在大脑中追溯代码实现，才能弄明白当下发生了什么，以及它对代码库的其它部分产生了什么样的影响。</p><p>澄清一下，这样对于全局状态来说是没问题的，但是对于简单的状态（比如一个弹窗是否打开，或者表单中填写的值）来说就会是很大的问题。更糟糕的是，这样基本没法扩展。你的应用越大，这个问题就越难处理。当然，用不一样的 reducer 去管理应用中的不同部分是没问题的，但是通过这些 action creators 和 reducer 来间接处理的方式并不是最好的。</p><p>就算没有使用 redux ，把应用中的所有状态全放在一个对象上还是会导致其他问题。当 React &lt;Context.Provider&gt; 获取到一个新的值，所有消费它的组件都会被更新且必须被渲染，哪怕它是一个只关心其中部分数据的函数组件。这就会带来潜在的性能问题（React-Redux v6 尝试使用这个办法，然后发现它不能和 hook 一起工作，这导致他们在 v7 中需要用其他办法来处理）。我的重点在于，如果把状态从逻辑上分隔开并且放在 React 树上对应合适的位置，那你就不用担心这些问题了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>react</tag>
      
      <tag>状态管理</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始的golang编程（day1）</title>
    <link href="/go-downloader-1-f517effa7d7b/"/>
    <url>/go-downloader-1-f517effa7d7b/</url>
    
    <content type="html"><![CDATA[<blockquote><p>第一天，完成go下载器的搭建</p></blockquote><h2 id="原型设计"><a href="#原型设计" class="headerlink" title="原型设计"></a>原型设计</h2><p>首先我们要拆分问题，一个支持多任务，多分片，多协议，还能断点续传的下载器无疑是复杂的任务，一时半会儿想不出好的解决方案。所以先将问题拆分简化，刨除所有的定语，一个下载器首先要能发出请求，然后将收到的数据保存至文件，其次才是逐个完成定语对应的功能。</p><h2 id="如何使用go完成http协议下载？"><a href="#如何使用go完成http协议下载？" class="headerlink" title="如何使用go完成http协议下载？"></a>如何使用go完成http协议下载？</h2><p>先写测试程序，目标：把baidu的首页html文件下载下来并保存到当前目录</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestDownload</span><span class="hljs-params">(f *testing.T)</span></span> &#123;<br>  <span class="hljs-comment">// 请求baidu首页</span><br>  resp, err := http.Get(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)<br>  <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;error&quot;</span>, err)<br>  &#125;<br>  <span class="hljs-comment">// 不要忘记结束时关闭IO流</span><br>  <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(Body io.ReadCloser)</span></span> &#123;<br>    err := Body.Close()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      fmt.Println(<span class="hljs-string">&quot;close error&quot;</span>, err)<br>    &#125;<br>  &#125;(resp.Body)<br>  <span class="hljs-comment">// 读取收到的数据</span><br>  body, err := io.ReadAll(resp.Body)<br>  <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;read failed&quot;</span>, err)<br>  &#125;<br>  <span class="hljs-comment">// 写入文件</span><br>  err = WriteFile(<span class="hljs-string">&quot;./index.html&quot;</span>, body)<br>  <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;=======failed=======&quot;</span>)<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  fmt.Println(<span class="hljs-string">&quot;=======finished=======&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">WriteFile</span><span class="hljs-params">(filePath <span class="hljs-type">string</span>, content []<span class="hljs-type">byte</span>)</span></span> <span class="hljs-type">error</span> &#123;<br>  file, err := os.OpenFile(filePath, os.O_WRONLY|os.O_CREATE, <span class="hljs-number">0666</span>)<br>  <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;file: &#x27;&quot;</span> + filePath + <span class="hljs-string">&quot;&#x27; open filed&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>  &#125;<br>  <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(file *os.File)</span></span> &#123;<br>    err := file.Close()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>    &#125;<br>  &#125;(file)<br>  write := bufio.NewWriter(file)<br>  <span class="hljs-keyword">if</span> _, err := write.Write(content); err != <span class="hljs-literal">nil</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;file: &#x27;&quot;</span> + filePath + <span class="hljs-string">&quot;&#x27; write failed&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><p>至此我们已经可以将baidu的首页是保存至本地。但这代码既不支持断点续传，也不能多个分片并行，不能满足我们的要求。可是通过这段代码，我们得以明白，下载器的核心就是下载数据，然后写入指定的位置接。接下来，我们要逐步完善它。</p><h2 id="实现断点续传"><a href="#实现断点续传" class="headerlink" title="实现断点续传"></a>实现断点续传</h2><p>为什么先说断点续传，因为分片并行下载的前提就是支持断点续传</p><h3 id="http协议如何做到断点续传？"><a href="#http协议如何做到断点续传？" class="headerlink" title="http协议如何做到断点续传？"></a>http协议如何做到断点续传？</h3><h3 id="如何分片写入文件"><a href="#如何分片写入文件" class="headerlink" title="如何分片写入文件?"></a>如何分片写入文件?</h3>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>home-center</tag>
      
      <tag>go-downloader</tag>
      
      <tag>编程日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始的golang编程（day0）</title>
    <link href="/go-downloader-0-3281461c64fb/"/>
    <url>/go-downloader-0-3281461c64fb/</url>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>虽然被部门安排去搞解决方案，转型胶片工程师，但我果然还是喜欢写代码。写了五年java，想换换口味，打算开个新坑，用一个项目完成go的入门。刚好每周都要去漫画网站还有番剧网站扫货，可是下载、归档、观赏总是要多个不同的应用衔接。尤其在归档和检索资源的时候，总需要大量人工。后续家里搞起媒体中心之后，多端观看也是问题。不如趁此机会实践一番，所以项目就这样启动啦。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol><li>定位家庭数据中心管理软件，负责多媒体、游戏库等数字资源的存储、归档工作。</li><li>支持图片、音乐、视频的全平台在线播放</li><li>提供steam游戏库CDN加速能力，maven库，node源等常用仓库代理缓存的能力</li><li>支持http和torrent下载</li><li>支持断点续传，支持多任务多分片同时下载</li><li>可以对图片文件进行分类，打标签</li><li>提供任务编排能力，允许配置图片，文本，torrent文件自动下载，分析归档任务</li><li>支持配置周期任务，进行重点数据的归档，压缩和冷备份</li><li>存储支持NAS或者OSS</li></ol><h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><p>架构图待补</p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>home-center</tag>
      
      <tag>go-downloader</tag>
      
      <tag>编程日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>评Unix哲学基础</title>
    <link href="/unix-philosophy-e7f3e70abb5a/"/>
    <url>/unix-philosophy-e7f3e70abb5a/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这本书对我而言太厚了，我曾多次翻开这本书并尝试读完它，可没有一次能完整读完。每每读到第三、四部分就意兴阑珊，草草收场，但我非常喜欢第一、二部分。或许是因为oncall太多，这里的每一条原则我都能找到共鸣。。。</p></blockquote><h2 id="1-模块原则：使用简洁的接口拼合简单的部件"><a href="#1-模块原则：使用简洁的接口拼合简单的部件" class="headerlink" title="1. 模块原则：使用简洁的接口拼合简单的部件"></a>1. 模块原则：使用简洁的接口拼合简单的部件</h2><h2 id="2-清晰原则：清晰胜于机巧"><a href="#2-清晰原则：清晰胜于机巧" class="headerlink" title="2. 清晰原则：清晰胜于机巧"></a>2. 清晰原则：清晰胜于机巧</h2><h2 id="3-组合原则：设计时考虑拼接组合"><a href="#3-组合原则：设计时考虑拼接组合" class="headerlink" title="3. 组合原则：设计时考虑拼接组合"></a>3. 组合原则：设计时考虑拼接组合</h2><h2 id="4-分离原则：策略同机制分离，接口同引擎分离"><a href="#4-分离原则：策略同机制分离，接口同引擎分离" class="headerlink" title="4. 分离原则：策略同机制分离，接口同引擎分离"></a>4. 分离原则：策略同机制分离，接口同引擎分离</h2><h2 id="5-简洁原则：设计要简洁，复杂度能低则低"><a href="#5-简洁原则：设计要简洁，复杂度能低则低" class="headerlink" title="5. 简洁原则：设计要简洁，复杂度能低则低"></a>5. 简洁原则：设计要简洁，复杂度能低则低</h2><h2 id="6-吝啬原则：除非却无他法，不要编写庞大的程序"><a href="#6-吝啬原则：除非却无他法，不要编写庞大的程序" class="headerlink" title="6. 吝啬原则：除非却无他法，不要编写庞大的程序"></a>6. 吝啬原则：除非却无他法，不要编写庞大的程序</h2><h2 id="7-透明性原则：设计要可见，以便审查和调试"><a href="#7-透明性原则：设计要可见，以便审查和调试" class="headerlink" title="7. 透明性原则：设计要可见，以便审查和调试"></a>7. 透明性原则：设计要可见，以便审查和调试</h2><h2 id="8-健壮原则：健壮源于透明与简洁"><a href="#8-健壮原则：健壮源于透明与简洁" class="headerlink" title="8. 健壮原则：健壮源于透明与简洁"></a>8. 健壮原则：健壮源于透明与简洁</h2><h2 id="9-表示原则：把知识叠入数据以求逻辑质朴而健壮"><a href="#9-表示原则：把知识叠入数据以求逻辑质朴而健壮" class="headerlink" title="9. 表示原则：把知识叠入数据以求逻辑质朴而健壮"></a>9. 表示原则：把知识叠入数据以求逻辑质朴而健壮</h2><h2 id="10-通俗原则：设计接口避免标新立异"><a href="#10-通俗原则：设计接口避免标新立异" class="headerlink" title="10. 通俗原则：设计接口避免标新立异"></a>10. 通俗原则：设计接口避免标新立异</h2><h2 id="11-缄默原则：如果一个程序没什么好说的，保持沉默"><a href="#11-缄默原则：如果一个程序没什么好说的，保持沉默" class="headerlink" title="11. 缄默原则：如果一个程序没什么好说的，保持沉默"></a>11. 缄默原则：如果一个程序没什么好说的，保持沉默</h2><h2 id="12-补救原则：出现异常时，马上退出并给出足够错误信息"><a href="#12-补救原则：出现异常时，马上退出并给出足够错误信息" class="headerlink" title="12. 补救原则：出现异常时，马上退出并给出足够错误信息"></a>12. 补救原则：出现异常时，马上退出并给出足够错误信息</h2><h2 id="13-经济原则：宁花机器一分，不花程序员一秒"><a href="#13-经济原则：宁花机器一分，不花程序员一秒" class="headerlink" title="13. 经济原则：宁花机器一分，不花程序员一秒"></a>13. 经济原则：宁花机器一分，不花程序员一秒</h2><h2 id="14-生成原则：避免手工hack，尽量编写程序去生成程序"><a href="#14-生成原则：避免手工hack，尽量编写程序去生成程序" class="headerlink" title="14. 生成原则：避免手工hack，尽量编写程序去生成程序"></a>14. 生成原则：避免手工hack，尽量编写程序去生成程序</h2><h2 id="15-优化原则：雕琢前先要有原型，跑之前先学会走"><a href="#15-优化原则：雕琢前先要有原型，跑之前先学会走" class="headerlink" title="15. 优化原则：雕琢前先要有原型，跑之前先学会走"></a>15. 优化原则：雕琢前先要有原型，跑之前先学会走</h2><h2 id="16-多样原则：绝不相信所谓“不二法门”的断言"><a href="#16-多样原则：绝不相信所谓“不二法门”的断言" class="headerlink" title="16. 多样原则：绝不相信所谓“不二法门”的断言"></a>16. 多样原则：绝不相信所谓“不二法门”的断言</h2><h2 id="17-扩展原则：设计着眼未来，未来总比预想来得快"><a href="#17-扩展原则：设计着眼未来，未来总比预想来得快" class="headerlink" title="17. 扩展原则：设计着眼未来，未来总比预想来得快"></a>17. 扩展原则：设计着眼未来，未来总比预想来得快</h2>]]></content>
    
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>程序设计</tag>
      
      <tag>Unix编程艺术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移除重复字符串和字符串压缩</title>
    <link href="/remove-redundant-and-compact-string-8589e22d4ce2/"/>
    <url>/remove-redundant-and-compact-string-8589e22d4ce2/</url>
    
    <content type="html"><![CDATA[<blockquote><p><em>请注意：案例中关键信息已经被匿名化处理</em></p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>上一轮质量改进分析内存堆栈发现，运行时堆内存会驻留大量重复字符串。一段长度20个ASCII字符的设备编码，在系统中最多可能出现m个内容相同的字符串实例（m是系统最大管理设备数量，量级：百万）。这造成堆内存空间极大浪费，大量的冗余数据将本该用于支撑业务运行的空间占用，导致系统的设备管理规格上不去，成本下不来，对友商的竞争力降低。</p><blockquote><p>以下数据为场景模拟，不包含产品代码，也不是生产环境上获取的dump，仅用于现象说明</p></blockquote><p><img src="/img/remove-redundant-and-compact-string/dump-1.png" alt="200万设备500万字符串"><br><img src="/img/remove-redundant-and-compact-string/model.svg" alt="示例设备对象模型"><br>可以看到，String实例数量达到设备实例数量的2.5倍。<br><img src="/img/remove-redundant-and-compact-string/repeated-string.png" alt="原理模拟，非生产环境数据"><br>通过jprofile分析，明显发现大量编码重复。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="为什么有重复"><a href="#为什么有重复" class="headerlink" title="为什么有重复"></a>为什么有重复</h3><p>由于模块负责GB28181协议中目录树功能，有大量层次化数据，即目录和目录下的设备。这些数据会驻留在内存中共查询和修改，数据之间的关系通过<code>ParentID</code>以及<code>externalDomainID</code>来表示。下面是个多层目录的示意图：<br><img src="/img/remove-redundant-and-compact-string/catalog-tree.svg" alt="行政区划-业务分组设备树示意图"><br>可以很明显看出，每个节点都会持有一个指向父节点和指向根节点的指针。这个指针实际使用以对应元素的id来表示并用String来保存。由于每次反序列化时都是创建一个新的String对象，所以堆内存中有多少个设备对象，就会有多少个重复的指向根节点的id，以及指向不同父节点的id。</p><h3 id="还有没有其他问题"><a href="#还有没有其他问题" class="headerlink" title="还有没有其他问题"></a>还有没有其他问题</h3><p>编码用String保存，还有没有优化空间呢？查看JDK8的源码，String对象内部使用char[]保存数据，而单个char使用16bit Unicode保存。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[The Java™ Tutorials](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html#:~:text=char%3A%20The%20char%20data%20type,'%20(or%2065%2C535%20inclusive)).">[1]</span></a></sup></p><blockquote><p>char: The char data type is a single 16-bit Unicode character. It has a minimum value of <code>\u0000</code> (or 0) and a maximum value of <code>\uffff</code> (or 65,535 inclusive).</p></blockquote><p>可是，按照<strong>GB28181-2022附录E 统一编码规则</strong><sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[GB/T 28181-2022, 公共安全视频监控联网系统信息传输、交换、控制技术要求](https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=8BBC2475624A6C31DC34A28052B3923D)">[2]</span></a></sup>的描述，编码仅会使用0到9的数字。即编码中单个字符仅需要4bit, 即<code>\u0</code>到<code>\uf</code>，就可以表示。所以使用String保存编码，实际上会造成大量空间浪费，利用率只有25%。我们需要一种新的方法来存储编码。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="在JDK8的环境下，提供一种新的实现，降低设备编码在系统中内存占用"><a href="#在JDK8的环境下，提供一种新的实现，降低设备编码在系统中内存占用" class="headerlink" title="在JDK8的环境下，提供一种新的实现，降低设备编码在系统中内存占用"></a>在JDK8的环境下，提供一种新的实现，降低设备编码在系统中内存占用</h3><p>首先，我们要确立初步目标：</p><ol><li>不再使用String保存设备编码，采用自定义类型；</li><li>新实现使用byte[]保存设备编码，采用的字符集编码单个字符占用空间应小于16bit。</li></ol><p>现在让我们看看类似的情况，别人都做了哪些工作：</p><h4 id="JEP-254-Compact-Strings-3"><a href="#JEP-254-Compact-Strings-3" class="headerlink" title="JEP 254: Compact Strings[3]"></a>JEP 254: Compact Strings<sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="[JEP 254: Compact Strings](https://openjdk.org/jeps/254)">[3]</span></a></sup></h4><p>实际上，早在JDK9，Java就实装了一项增强。JEP 254，压缩字符串，简单说来就是想办法用更节省空间的办法来表示字符串。参考原文描述</p><blockquote><p>We propose to change the internal representation of the String class from a UTF-16 char array to a byte array plus an encoding-flag field. The new String class will store characters encoded either as ISO-8859-1&#x2F;Latin-1 (one byte per character), or as UTF-16 (two bytes per character), based upon the contents of the string. The encoding flag will indicate which encoding is used.</p><p>String-related classes such as AbstractStringBuilder, StringBuilder, and StringBuffer will be updated to use the same representation, as will the HotSpot VM’s intrinsic string operations.</p><p>This is purely an implementation change, with no changes to existing public interfaces. There are no plans to add any new public APIs or other interfaces.</p><p>The prototyping work done to date confirms the expected reduction in memory footprint, substantial reductions of GC activity, and minor performance regressions in some corner cases.</p><p>For further detail, see:</p><ul><li><a href="http://cr.openjdk.java.net/~shade/density/state-of-string-density-v1.txt">State of String Density Performance</a></li><li><a href="http://cr.openjdk.java.net/~huntch/string-density/reports/String-Density-SPARC-jbb2005-Report.pdf">String Density Impact on SPECjbb2005 on SPARC</a></li></ul></blockquote><p>从JDK9开始，String的内部实现会判断要表示的字符串能否用Latin-1编码，如果可以则使用Latin-1编码<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="[ISO/IEC 8859-1/Latin-1](https://en.wikipedia.org/wiki/ISO/IEC_8859-1)">[4]</span></a></sup>。Latin-1会占用8bit，刚好是UTF-16的一半。根据介绍，采用新的实现后证实内存使用量减少，GC活动大幅减少，以及某些极端情况下的性能轻微下降。</p><h4 id="Netty-AsciiString"><a href="#Netty-AsciiString" class="headerlink" title="Netty: AsciiString"></a>Netty: AsciiString</h4><p>类似JEP254，其实高性能网络框架也对String有类似的改进。参考Netty对AsciiString类的注释：</p><blockquote><p>A string which has been encoded into a character encoding whose character always takes a single byte, similarly to ASCII. It internally keeps its content in a byte array unlike <code>String</code>, which uses a character array, for reduced memory footprint and faster data transfer from&#x2F;to byte-based data structures such as a byte array and <code>ByteBuffer</code>. It is often used in conjunction with Headers that require a <code>CharSequence</code>.</p><p>This class was designed to provide an immutable array of bytes, and caches some internal state based upon the value of this array. However underlying access to this byte array is provided via not copying the array on construction or <code>array()</code>. If any changes are made to the underlying byte array it is the user’s responsibility to call <code>arrayChanged()</code> so the state of this class can be reset.</p></blockquote><p>这里的AsciiString通常被用在Netty内部表示请求的报文头这一类只会使用英文字符，数字，一些常见标点符号如“*”、“&#x2F;”等场景。使用ASCII编码可以减少内存占用，同时利用byte存储，还能在拷贝数据的时候减少操作，提高性能。</p><h4 id="我们怎么办"><a href="#我们怎么办" class="headerlink" title="我们怎么办?"></a>我们怎么办?</h4><p>看过别人的解决方案之后，我们认识到：使用<code>byte[]</code>代替<code>char[]</code>是正确的方向，但是我们需要关注如何编码<code>byte[]</code>的问题。</p><p><strong>为此，需要先确认一个字符可能出现多少种信息？</strong> 参考GB28181的设计以及实际运行中的dump分析结果，再结合netty的实践，我们可以得出结论：使用新的设计表示设备编码、各种命令、报文头信息收益最大，因为这些场景的字符仅限于a-z，A-Z，0-9和一些常见字符，可能得取值不会超过80种。</p><p><strong>然后我们需要寻找一个合适的编码方式。</strong> 一个字符有80种可能性，则基于公式：</p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mo>=</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>N</mi></mrow><annotation encoding="application/x-tex">S = \log_{2}N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></span><p>将N&#x3D;80带入后可知，S≈6.32，即需要至少7个bit才能表示这个字符的所有可能性。但为了方便通过下标找到对应的字符，所以使用一个byte（即8bit）表示。此时我们既可以学JEP5254，使用Latin-1，也可以学Netty用ASCII编码。因为在我们的输入条件下，最终都会被编码成一个byte。实际实现中，为了简化编码，直接在byte中保存char。</p><p>参考代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeviceID</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] value;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">DeviceID</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = parse(id);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] parse(String id) &#123;<br>        <span class="hljs-type">byte</span>[] value = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[id.length()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; id.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> id.charAt(i);<br>            <span class="hljs-keyword">if</span> (!Character.isLetterOrDigit(c)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;unsupported id: &quot;</span> + id);<br>            &#125;<br>            value[i] = (<span class="hljs-type">byte</span>) c;<br>        &#125;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="借鉴领域驱动的概念解决大量重复问题"><a href="#借鉴领域驱动的概念解决大量重复问题" class="headerlink" title="借鉴领域驱动的概念解决大量重复问题"></a>借鉴领域驱动的概念解决大量重复问题</h3><p>熟悉DDD（领域驱动设计）的朋友们肯定知道一个概念，<strong>实体对象（EntityObject）</strong>。实体对象在系统内是唯一的，不论属性如何变化。而在GB28181的体系内，设备的id类似身份证号，是设备的唯一标识。设备的属性如在线状态可能变化，但是只要设备不被替换，其id不能改变。所以如果我们重写模块中的反序列化组件，让相同编码都指向一个对象引用，就可以保证系统内部不再出现重复的编码对象。</p><p>这里我们对前面定义的DeviceID进行改造，内部新增一个缓存，用于记录系统内当前已有的DeviceID对象。当我们需要创建一个新的DeviceID时，先在缓存中查找是否已经创建值相同的DeviceID对象，如果有就返回已创建对象的引用，没有就创建个新的然后返回新创建对象的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeviceID</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, DeviceID&gt; referenceCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] value;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">DeviceID</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = parse(id);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DeviceID <span class="hljs-title function_">of</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-keyword">return</span> referenceCache.computeIfAbsent(id, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeviceID</span>(id));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但这样设计存在几个问题：</p><ol><li>如前所述，String做key，空间利用太低，削弱了优化效果；</li><li>当DeviceID对应的设备从系统中移除的时候，如何将DeviceID从缓存中驱逐；</li><li>HashMap实现不是线程安全的，并发调用getOrDefault的时候方法可能会空转不返回。</li><li>由于DeviceID会作为key，每次进行比对都会求一遍哈希值，对性能有负面影响</li></ol><p><strong>问题1</strong>，使用DeviceID替代String作为key是个不错的选择。这里我们本身就要返回DeviceID，那么key只存放对象引用显然划算的多。同时还能利用重写的hashcode与equals方法找到重复的对象。</p><p><strong>问题2</strong>，可以采用两种办法：1）使用引用计数器，要求开发人员在不使用某个DeviceID的时候显式调用release方法，定时扫描引用计数器，为0的时候从缓存中移除对应DeviceID对象；2）参考ThreadLocal的设计，利用<strong>弱引用</strong>的机制，在GC的时候自动完成对应数据的清理动作。</p><p>这里采用弱引用机制完成自动的数据清理动作。原因有3：</p><ol><li>引用计数器虽然逻辑简单，但是使用者必须在编写代码时记得释放，否则就会有泄露风险。旧代码改造变更太多，非常容易引入问题，也不利于代码检视。</li><li>ThreadLocal的泄露风险在此案例中不存在</li><li>可以直接使用WeakHashMap，不需要额外代码</li></ol><p><strong>问题3</strong>，虽然换用了WeakHashMap，但它也是线程不安全的，这里可以利用Collections.synchronizedMap简单创建一个同步的map来解决问题。</p><p><strong>问题4</strong>，因为DeviceID对象本身设计为不可变对象，所以可以提前计算哈希值并保存，重写hashcode方法，令其返回保存的哈希值即可解决。</p><p>完成修改后的参考代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeviceID</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CharSequence</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;DeviceID, WeakReference&lt;DeviceID&gt;&gt; cache =<br>            Collections.synchronizedMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakHashMap</span>&lt;&gt;());<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] value;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> hash;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">DeviceID</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = parse(id);<br>        <span class="hljs-built_in">this</span>.hash = hash(<span class="hljs-built_in">this</span>.value);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] parse(String id) &#123;<br>        <span class="hljs-type">byte</span>[] value = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[id.length()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; id.length(); i++) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> id.charAt(i);<br>            <span class="hljs-keyword">if</span> (!Character.isLetterOrDigit(c)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;unsupported id: &quot;</span> + id);<br>            &#125;<br>            value[i] = (<span class="hljs-type">byte</span>) c;<br>        &#125;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] value)</span> &#123;<br>        <span class="hljs-keyword">return</span> Arrays.hashCode(value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DeviceID <span class="hljs-title function_">of</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-type">DeviceID</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeviceID</span>(id);<br>        <span class="hljs-keyword">return</span> cache.computeIfAbsent(obj, k -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;&gt;(obj)).get();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> DeviceID deviceID)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> Arrays.equals(value, deviceID.value);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> hash;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.value.length;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">charAt</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">char</span>) <span class="hljs-built_in">this</span>.value[index];<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">subSequence</span><span class="hljs-params">(<span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>        <span class="hljs-keyword">return</span> toString(start, end);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> toString(<span class="hljs-number">0</span>, length());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">(<span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>        <span class="hljs-keyword">if</span> (start &lt; <span class="hljs-number">0</span> || end &gt; length() || start &gt; end) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexOutOfBoundsException</span>();<br>        &#125;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt; end; i++) &#123;<br>            sb.append((<span class="hljs-type">char</span>) <span class="hljs-built_in">this</span>.value[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h2><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><p>下面将通过测试用例验证字符串压缩和缓存自动回收的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 不GC，多次将值相同但不是同实例的字符串传入DeviceID.of方法，获得的DeviceID实例相同</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">should_return_same_instance_after_create</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">code1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;01010020002001234567&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">code2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(code1);<br>    assertNotEquals(System.identityHashCode(code1), System.identityHashCode(code2));<br>    <span class="hljs-type">DeviceID</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> DeviceID.of(code1);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> System.identityHashCode(id);<br>    id = DeviceID.of(code2);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> System.identityHashCode(id);<br>    assertEquals(first, second);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 一段字符串实例，创建DeviceID对象后移除强引用，然后GC，再次使用该字符串创建DeviceID对象，两次得到的DeviceID对象是不同实例</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">should_return_new_instance_after_gc</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;01010020002001234567&quot;</span>;<br>    <span class="hljs-type">DeviceID</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> DeviceID.of(code);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> System.identityHashCode(id);<br>    id = <span class="hljs-literal">null</span>;<br>    System.gc();<br>    id = DeviceID.of(code);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> System.identityHashCode(id);<br>    assertNotEquals(first, second);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">should_be_thread_safe_when_create_in_multi_thread</span><span class="hljs-params">()</span> &#123;<br>    Callable&lt;List&lt;DeviceID&gt;&gt; callable = () -&gt; Stream.generate(UUID::randomUUID)<br>            .map(UUID::toString)<br>            .distinct()<br>            .limit(<span class="hljs-number">100</span>)<br>            .map(DeviceID::of)<br>            .toList();<br>    <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>    List&lt;Callable&lt;List&lt;DeviceID&gt;&gt;&gt; tasks = Stream.generate(() -&gt; callable).limit(<span class="hljs-number">10</span>).toList();<br>    await().atMost(Duration.ofSeconds(<span class="hljs-number">2</span>)).untilAsserted(() -&gt; &#123;<br>        List&lt;Future&lt;List&lt;DeviceID&gt;&gt;&gt; futures = executor.invokeAll(tasks);<br>        futures.forEach(future -&gt; assertTrue(future.isDone()));<br>    &#125;);<br>    executor.shutdown();<br>&#125;<br></code></pre></td></tr></table></figure><p>特殊的：下面这个用例只有在未包含JEP254的jdk8及老版本才能执行成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">size_should_less_than_string</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;01010020002001234567&quot;</span>;<br>    <span class="hljs-type">DeviceID</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> DeviceID.of(code);<br>    System.out.println(GraphLayout.parseInstance(code).toFootprint());<br>    System.out.println(GraphLayout.parseInstance(id).toFootprint());<br>    assertTrue(GraphLayout.parseInstance(code).totalSize() &gt; GraphLayout.parseInstance(id).totalSize());<br>&#125;<br></code></pre></td></tr></table></figure><p>在JDK8中会有如下输出，可以看到对20位编码，一个实例下新类可以降低20%的总内存占用</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs console">java.lang.String@4f638935d footprint:<br>     COUNT       AVG       SUM   DESCRIPTION<br>         1        56        56   [C<br>         1        24        24   java.lang.String<br>         2                  80   (total)<br><br><br>io.firestige.iris.DeviceID@7c417213d footprint:<br>     COUNT       AVG       SUM   DESCRIPTION<br>         1        40        40   [B<br>         1        24        24   io.firestige.iris.DeviceID<br>         2                  64   (total)<br></code></pre></td></tr></table></figure><p>当code的长度变为40时（实际使用中有时会将设备编码和域编码拼接），新的类可以节省33.33%内存空间</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs console">java.lang.String@4f638935d footprint:<br>     COUNT       AVG       SUM   DESCRIPTION<br>         1        96        96   [C<br>         1        24        24   java.lang.String<br>         2                 120   (total)<br><br><br>io.firestige.iris.DeviceID@7880cdf3d footprint:<br>     COUNT       AVG       SUM   DESCRIPTION<br>         1        56        56   [B<br>         1        24        24   io.firestige.iris.DeviceID<br>         2                  80   (total)<br></code></pre></td></tr></table></figure><p>即随着字符串越来越长，对象头占用空间对实例占用内存的贡献降低，新类的压缩率会逐渐上升，最终可以节省接近50%内存空间。</p><h3 id="dump对比"><a href="#dump对比" class="headerlink" title="dump对比"></a>dump对比</h3><p>通过dump的分析结果，我们可以很明显的看到总的内存占用降低，重复字符串的消失。</p><table><thead><tr><th></th><th>改动前</th><th>改动后</th></tr></thead><tbody><tr><td>重复字符串分析</td><td><img src="/img/remove-redundant-and-compact-string/repeated-string.png" alt="重复字符串分析"></td><td><img src="/img/remove-redundant-and-compact-string/repeated-string-2.png" alt="重复字符串分析"></td></tr><tr><td>老年代总量对比</td><td><img src="/img/remove-redundant-and-compact-string/dump-1.png" alt="老年代总量对比"></td><td><img src="/img/remove-redundant-and-compact-string/dump-2.png" alt="老年代总量对比"></td></tr></tbody></table><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html#:~:text=char%3A%20The%20char%20data%20type,'%20(or%2065%2C535%20inclusive)">The Java™ Tutorials</a>.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://openstd.samr.gov.cn/bzgk/gb/newGbInfo?hcno=8BBC2475624A6C31DC34A28052B3923D">GB&#x2F;T 28181-2022, 公共安全视频监控联网系统信息传输、交换、控制技术要求</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span><a href="https://openjdk.org/jeps/254">JEP 254: Compact Strings</a><a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span><a href="https://en.wikipedia.org/wiki/ISO/IEC_8859-1">ISO&#x2F;IEC 8859-1&#x2F;Latin-1</a><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>字符串优化</tag>
      
      <tag>内存优化</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
